{
  "version": 3,
  "sources": ["../../src/Block.ts"],
  "sourcesContent": ["import { calculateHash, Chain, Transaction, MerkleTree } from \"../internal\";\n\n/** Creates a `Block` instance for `Transaction`s and `Chain`s. */\n\nclass Block {\n  /**\n  * Constructs the `Block` class.\n  * @param {Array<Transaction>} data - provides the block data in terms of an array of `Transaction`s.\n  * @param {string | null} previousHash - The hash of the previous `Block` in the chain.*/\n  data: Array<Transaction>;\n  hash: string;\n  previousHash: string | null;\n  rootHash: string;\n  timestamp: Date;\n  pow: number;\n  constructor(data: Array<Transaction>, previousHash: string | null) {\n    /** @private */\n    this.data = data;\n    /** @private */\n    this.hash = \"\";\n    /** @private */\n    this.previousHash = previousHash;\n    /** @private */\n    this.rootHash = MerkleTree.create(data).root.value;\n    /** @private */\n    this.timestamp = new Date();\n    /** @private */\n    this.pow = 0;\n  }\n\n  mine(difficulty: number) {\n    const regex = new RegExp(`^(0){${difficulty}}.*`);\n    while (!this.hash.match(regex)) {\n      this.pow++;\n      this.hash = calculateHash(this);\n    }\n  }\n\n  hasValidTransactions(chain: Chain) {\n    return this.data.every((transaction: Transaction) =>\n      transaction.isValid(chain)\n    );\n  }\n}\n\nexport default Block;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,sBAA8D;AAI9D,YAAY;AAAA,EAWV,YAAY,MAA0B,cAA6B;AAEjE,SAAK,OAAO;AAEZ,SAAK,OAAO;AAEZ,SAAK,eAAe;AAEpB,SAAK,WAAW,2BAAW,OAAO,MAAM,KAAK;AAE7C,SAAK,YAAY,IAAI;AAErB,SAAK,MAAM;AAAA;AAAA,EAGb,KAAK,YAAoB;AACvB,UAAM,QAAQ,IAAI,OAAO,QAAQ;AACjC,WAAO,CAAC,KAAK,KAAK,MAAM,QAAQ;AAC9B,WAAK;AACL,WAAK,OAAO,mCAAc;AAAA;AAAA;AAAA,EAI9B,qBAAqB,OAAc;AACjC,WAAO,KAAK,KAAK,MAAM,CAAC,gBACtB,YAAY,QAAQ;AAAA;AAAA;AAK1B,IAAO,gBAAQ;",
  "names": []
}
