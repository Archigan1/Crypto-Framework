{
  "version": 3,
  "sources": ["../../src/Chain.ts"],
  "sourcesContent": ["import { calculateHash, NETWORK_WALLET, Block, Transaction } from '../internal';\n\n/**\n* Defines a `Chain` instance. \n*/\n\nclass Chain {\n  chain: Array<Block>;\n  difficulty: number;\n  blockTime: number;\n  transactions: Array<Transaction>;\n  reward: number;\n  constructor(chain: Array<Block>, difficulty: number) {\n    this.chain = chain;\n    this.difficulty = difficulty;\n    this.blockTime = 10000;\n    this.transactions = [];\n    this.reward = 678;\n  }\n\n  static create(firstUserAddress: string) {\n    const firstTransaction = new Transaction(\n      NETWORK_WALLET.publicKey,\n      firstUserAddress,\n      10000\n    );\n    firstTransaction.sign(NETWORK_WALLET);\n    const genesisBlock = new Block([firstTransaction], null);\n    genesisBlock.mine(3);\n    return new Chain([genesisBlock], 3);\n  }\n\n  addBlock(transactions: Array<Transaction>) {\n    const lastBlock = this.chain.at(-1);\n    const newBlock = new Block(transactions, lastBlock ? lastBlock.hash : null);\n    newBlock.mine(this.difficulty);\n    this.chain.push(newBlock);\n    this.difficulty +=\n      Date.now() - newBlock.timestamp.getTime() > this.blockTime ? -1 : 1;\n  }\n\n  isValid() {\n    if (\n      this.chain[0].hash !== calculateHash(this.chain[0]) ||\n      !this.chain[0].hasValidTransactions(this)\n    )\n      return false;\n\n    for (let index = 1; index < this.chain.length; index++) {\n      const currentBlock = this.chain[index];\n      const previousBlock = this.chain[index - 1];\n      if (\n        currentBlock.hash !== calculateHash(currentBlock) ||\n        previousBlock.hash !== currentBlock.previousHash ||\n        !currentBlock.hasValidTransactions(this)\n      )\n        return false;\n    }\n    return true;\n  }\n\n  addTransaction(transaction: Transaction) {\n    const isDuplicate = this.transactions.some(\n      ({ hash }) => hash === transaction.hash\n    );\n    if (!isDuplicate && transaction.isValid(this)) {\n      this.transactions.push(transaction);\n    }\n  }\n\n  getBalance(pubKey: string) {\n    let balance = 0;\n    this.chain.forEach((block) => {\n      block.data.forEach((transaction: Transaction) => {\n        if (transaction.sender === pubKey) {\n          balance -= transaction.amount;\n        }\n\n        if (transaction.receiver === pubKey) {\n          balance += transaction.amount;\n        }\n      });\n    });\n    return balance;\n  }\n\n  mineTransactions(rewardAddress: string) {\n    const rewardTransaction = new Transaction(\n      NETWORK_WALLET.publicKey,\n      rewardAddress,\n      this.reward\n    );\n    rewardTransaction.sign(NETWORK_WALLET);\n    this.addBlock([rewardTransaction, ...this.transactions]);\n    this.transactions = [];\n  }\n}\n\nexport default Chain;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,sBAAkE;AAMlE,YAAY;AAAA,EAMV,YAAY,OAAqB,YAAoB;AACnD,SAAK,QAAQ;AACb,SAAK,aAAa;AAClB,SAAK,YAAY;AACjB,SAAK,eAAe;AACpB,SAAK,SAAS;AAAA;AAAA,SAGT,OAAO,kBAA0B;AACtC,UAAM,mBAAmB,IAAI,4BAC3B,+BAAe,WACf,kBACA;AAEF,qBAAiB,KAAK;AACtB,UAAM,eAAe,IAAI,sBAAM,CAAC,mBAAmB;AACnD,iBAAa,KAAK;AAClB,WAAO,IAAI,MAAM,CAAC,eAAe;AAAA;AAAA,EAGnC,SAAS,cAAkC;AACzC,UAAM,YAAY,KAAK,MAAM,GAAG;AAChC,UAAM,WAAW,IAAI,sBAAM,cAAc,YAAY,UAAU,OAAO;AACtE,aAAS,KAAK,KAAK;AACnB,SAAK,MAAM,KAAK;AAChB,SAAK,cACH,KAAK,QAAQ,SAAS,UAAU,YAAY,KAAK,YAAY,KAAK;AAAA;AAAA,EAGtE,UAAU;AACR,QACE,KAAK,MAAM,GAAG,SAAS,mCAAc,KAAK,MAAM,OAChD,CAAC,KAAK,MAAM,GAAG,qBAAqB;AAEpC,aAAO;AAET,aAAS,QAAQ,GAAG,QAAQ,KAAK,MAAM,QAAQ,SAAS;AACtD,YAAM,eAAe,KAAK,MAAM;AAChC,YAAM,gBAAgB,KAAK,MAAM,QAAQ;AACzC,UACE,aAAa,SAAS,mCAAc,iBACpC,cAAc,SAAS,aAAa,gBACpC,CAAC,aAAa,qBAAqB;AAEnC,eAAO;AAAA;AAEX,WAAO;AAAA;AAAA,EAGT,eAAe,aAA0B;AACvC,UAAM,cAAc,KAAK,aAAa,KACpC,CAAC,EAAE,WAAW,SAAS,YAAY;AAErC,QAAI,CAAC,eAAe,YAAY,QAAQ,OAAO;AAC7C,WAAK,aAAa,KAAK;AAAA;AAAA;AAAA,EAI3B,WAAW,QAAgB;AACzB,QAAI,UAAU;AACd,SAAK,MAAM,QAAQ,CAAC,UAAU;AAC5B,YAAM,KAAK,QAAQ,CAAC,gBAA6B;AAC/C,YAAI,YAAY,WAAW,QAAQ;AACjC,qBAAW,YAAY;AAAA;AAGzB,YAAI,YAAY,aAAa,QAAQ;AACnC,qBAAW,YAAY;AAAA;AAAA;AAAA;AAI7B,WAAO;AAAA;AAAA,EAGT,iBAAiB,eAAuB;AACtC,UAAM,oBAAoB,IAAI,4BAC5B,+BAAe,WACf,eACA,KAAK;AAEP,sBAAkB,KAAK;AACvB,SAAK,SAAS,CAAC,mBAAmB,GAAG,KAAK;AAC1C,SAAK,eAAe;AAAA;AAAA;AAIxB,IAAO,gBAAQ;",
  "names": []
}
