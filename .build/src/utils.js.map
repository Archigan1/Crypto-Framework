{
  "version": 3,
  "sources": ["../../src/utils.ts"],
  "sourcesContent": ["import { createHash } from \"crypto\";\nimport Block from \"./Block\";\nimport MerkleNode from \"./MerkleNode\";\n\nexport const getHash = (data: string): string => {\n  return createHash(\"sha256\").update(data.toString()).digest(\"hex\");\n};\n\nexport const makeRoot = (arr: Array<MerkleNode>): MerkleNode => {\n  if (arr.length === 1) return arr[0];\n  const list = [];\n  const length = arr.length;\n  for (let i = 0; i < length; i += 2) {\n    const currentItem = arr[i];\n    if (i + 1 >= length) {\n      list.push(currentItem);\n      break;\n    }\n    const nextItem = arr[i + 1];\n    let value = currentItem.value + nextItem.value;\n    const node = new MerkleNode(getHash(value), currentItem, nextItem);\n    list.push(node);\n  }\n  return makeRoot(list);\n};\n\nexport const calculateHash = (block: Block) => {\n  const blockData =\n    block.rootHash +\n    block.previousHash +\n    block.timestamp.toISOString() +\n    block.pow.toString();\n  return createHash(\"sha256\").update(blockData).digest(\"hex\");\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA2B;AAE3B,wBAAuB;AAEhB,MAAM,UAAU,CAAC,SAAyB;AAC/C,SAAO,8BAAW,UAAU,OAAO,KAAK,YAAY,OAAO;AAAA;AAGtD,MAAM,WAAW,CAAC,QAAuC;AAC9D,MAAI,IAAI,WAAW;AAAG,WAAO,IAAI;AACjC,QAAM,OAAO;AACb,QAAM,SAAS,IAAI;AACnB,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAClC,UAAM,cAAc,IAAI;AACxB,QAAI,IAAI,KAAK,QAAQ;AACnB,WAAK,KAAK;AACV;AAAA;AAEF,UAAM,WAAW,IAAI,IAAI;AACzB,QAAI,QAAQ,YAAY,QAAQ,SAAS;AACzC,UAAM,OAAO,IAAI,0BAAW,QAAQ,QAAQ,aAAa;AACzD,SAAK,KAAK;AAAA;AAEZ,SAAO,SAAS;AAAA;AAGX,MAAM,gBAAgB,CAAC,UAAiB;AAC7C,QAAM,YACJ,MAAM,WACN,MAAM,eACN,MAAM,UAAU,gBAChB,MAAM,IAAI;AACZ,SAAO,8BAAW,UAAU,OAAO,WAAW,OAAO;AAAA;",
  "names": []
}
